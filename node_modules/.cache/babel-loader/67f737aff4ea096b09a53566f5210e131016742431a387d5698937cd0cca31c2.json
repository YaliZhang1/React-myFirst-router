{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hy React\\\\self-studying-react\\\\Todo-List\\\\React-todo-list\\\\src\\\\components\\\\Header\\\\index.jsx\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Header extends Component {\n  constructor(...args) {\n    super(...args);\n    //键盘事件的回调\n    this.handleKeyUp = event => {\n      //解构赋值获取keyCode,target\n      const {\n        keyCode,\n        target\n      } = event; //解构赋值的意思是，从event身上拿到keyCode,target.这样可以简化后续代码，不需要每次都写成event.keyCode和event.target.这两种写法的效果是一样的。\n      //如果按键是Enter\n      if (keyCode !== 13) return; //因为14行已经解构赋值了，所以这里可以之间用keyCode了。\n      //添加的todo名字不能为空\n      if (target.value.trim() === \"\") {\n        //因为14行已经解构赋值了，所以这里可以之间用target了。\n        alert(\"Task name cannot be empty!\");\n        return;\n      }\n      //准备好一个todo对象\n      const todoObj = {\n        id: nanoid(),\n        name: target.value,\n        done: false\n      };\n      //将todoObj传递给App\n      this.props.addTodo(todoObj);\n      //清空输入框\n      target.value = \"\";\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onKeyUp: this.handleKeyUp,\n        type: \"text\",\n        placeholder: \"Please enter your task name, press Enter to confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n}\n//对接收的props进行：类型以及必要性的限制（需要通过 npm add prop-types安装先）\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired\n};","map":{"version":3,"names":["React","Component","PropTypes","nanoid","jsxDEV","_jsxDEV","Header","constructor","args","handleKeyUp","event","keyCode","target","value","trim","alert","todoObj","id","name","done","props","addTodo","render","className","children","onKeyUp","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","func","isRequired"],"sources":["D:/Hy React/self-studying-react/Todo-List/React-todo-list/src/components/Header/index.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./index.css\";\r\n\r\nexport default class Header extends Component {\r\n  //对接收的props进行：类型以及必要性的限制（需要通过 npm add prop-types安装先）\r\n  static propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n  };\r\n  //键盘事件的回调\r\n  handleKeyUp = (event) => {\r\n    //解构赋值获取keyCode,target\r\n    const { keyCode, target } = event; //解构赋值的意思是，从event身上拿到keyCode,target.这样可以简化后续代码，不需要每次都写成event.keyCode和event.target.这两种写法的效果是一样的。\r\n    //如果按键是Enter\r\n    if (keyCode !== 13) return; //因为14行已经解构赋值了，所以这里可以之间用keyCode了。\r\n    //添加的todo名字不能为空\r\n    if (target.value.trim() === \"\") {\r\n      //因为14行已经解构赋值了，所以这里可以之间用target了。\r\n      alert(\"Task name cannot be empty!\");\r\n      return;\r\n    }\r\n    //准备好一个todo对象\r\n    const todoObj = { id: nanoid(), name: target.value, done: false };\r\n    //将todoObj传递给App\r\n    this.props.addTodo(todoObj);\r\n    //清空输入框\r\n    target.value = \"\";\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"todo-header\">\r\n        <input\r\n          onKeyUp={this.handleKeyUp}\r\n          type=\"text\"\r\n          placeholder=\"Please enter your task name, press Enter to confirm\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,eAAe,MAAMC,MAAM,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAK5C;IAAA,KACAC,WAAW,GAAIC,KAAK,IAAK;MACvB;MACA,MAAM;QAAEC,OAAO;QAAEC;MAAO,CAAC,GAAGF,KAAK,CAAC,CAAC;MACnC;MACA,IAAIC,OAAO,KAAK,EAAE,EAAE,OAAO,CAAC;MAC5B;MACA,IAAIC,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC9B;QACAC,KAAK,CAAC,4BAA4B,CAAC;QACnC;MACF;MACA;MACA,MAAMC,OAAO,GAAG;QAAEC,EAAE,EAAEd,MAAM,CAAC,CAAC;QAAEe,IAAI,EAAEN,MAAM,CAACC,KAAK;QAAEM,IAAI,EAAE;MAAM,CAAC;MACjE;MACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC;MAC3B;MACAJ,MAAM,CAACC,KAAK,GAAG,EAAE;IACnB,CAAC;EAAA;EACDS,MAAMA,CAAA,EAAG;IACP,oBACEjB,OAAA;MAAKkB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BnB,OAAA;QACEoB,OAAO,EAAE,IAAI,CAAChB,WAAY;QAC1BiB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC;MAAqD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;AAlCE;AADmBzB,MAAM,CAElB0B,SAAS,GAAG;EACjBX,OAAO,EAAEnB,SAAS,CAAC+B,IAAI,CAACC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}