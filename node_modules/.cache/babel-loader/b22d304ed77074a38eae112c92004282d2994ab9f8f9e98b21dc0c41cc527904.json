{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hy React\\\\self-studying-react\\\\ShangGuiGu-cases-many\\\\react-github-case\\\\src\\\\App.jsx\";\nimport React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport List from \"./components/List\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    //初始化状态\n    this.state = {\n      users: [],\n      //uesers初始值为数组\n      ifFirst: true,\n      //是否为第一次打开页面\n      isLoading: false,\n      //标识是否处于加载中\n      error: \"\" //存储请求相关错误信息\n    };\n    // 更新App的 state\n    this.updateAppState = stateObj => {\n      this.setState(stateObj); //setState修改state\n    };\n  }\n  render() {\n    //const { users } = this.state; 解构，目的是为了拿到状态state里面的users。注意加this\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        updateAppState: this.updateAppState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        ...this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Search","List","jsxDEV","_jsxDEV","App","constructor","args","state","users","ifFirst","isLoading","error","updateAppState","stateObj","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Hy React/self-studying-react/ShangGuiGu-cases-many/react-github-case/src/App.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport List from \"./components/List\";\n\nexport default class App extends Component {\n  //初始化状态\n  state = {\n    users: [], //uesers初始值为数组\n    ifFirst: true, //是否为第一次打开页面\n    isLoading: false, //标识是否处于加载中\n    error: \"\", //存储请求相关错误信息\n  };\n  // 更新App的 state\n  updateAppState = (stateObj) => {\n    this.setState(stateObj); //setState修改state\n  };\n\n  render() {\n    //const { users } = this.state; 解构，目的是为了拿到状态state里面的users。注意加this\n    return (\n      <div className=\"container\">\n        {/* 把这个函数写到儿子里面，然后去儿子组件里面接一下 */}\n        <Search updateAppState={this.updateAppState} />\n        {/*<List users={users} />  //由于前面20行解构了，所以这里直接拿users就行 。但是由于这里需要拿更多数据，所以使用下面的代码*/}\n        <List {...this.state} />\n      </div>\n    );\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,MAAMC,GAAG,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACzC;IAAA,KACAC,KAAK,GAAG;MACNC,KAAK,EAAE,EAAE;MAAE;MACXC,OAAO,EAAE,IAAI;MAAE;MACfC,SAAS,EAAE,KAAK;MAAE;MAClBC,KAAK,EAAE,EAAE,CAAE;IACb,CAAC;IACD;IAAA,KACAC,cAAc,GAAIC,QAAQ,IAAK;MAC7B,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC;IAC3B,CAAC;EAAA;EAEDE,MAAMA,CAAA,EAAG;IACP;IACA,oBACEZ,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAExBd,OAAA,CAACH,MAAM;QAACY,cAAc,EAAE,IAAI,CAACA;MAAe;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE/ClB,OAAA,CAACF,IAAI;QAAA,GAAK,IAAI,CAACM;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}